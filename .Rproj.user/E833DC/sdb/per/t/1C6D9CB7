{
    "collab_server" : "",
    "contents" : "library(shiny)\nlibrary(DT)\nlibrary(corrplot)\nlibrary(Hmisc)\nlibrary(rpivotTable)\nlibrary(ggplot2)\nlibrary(GGally)\nlibrary(plotly)\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n   \n  data_in <- reactive({\n    inFile <- input$upload\n    \n    if (is.null(inFile))\n      return(NULL)\n    dat = read.csv(inFile$datapath, header=input$header, sep=input$sep, \n             quote=input$quote)\n    dat\n  })\n  \n  output$contents <- DT::renderDataTable({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n   datatable(data_in())\n    \n  })\n  \n  output$summary <- renderPrint({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    summary(data_in())\n  })\n  \n  output$str <- renderPrint({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    str(data_in())\n  })\n  \n  missing_reactive <- reactive({ sum(is.na(data_in()))})\n  \n  output$missingtext <- renderText({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    h = paste0(\"There are \", missing_reactive(), \" missing values in this dataset.\")\n    print(h)\n  })\n  \n  output$columns <- renderUI({\n    cols = colnames(data_in())\n    selectInput(\"columnsUI\", \"Select a variable from the dataset:\", choices = cols)\n  })\n\n  columns_reactive <- reactive({\n    c = input$columnsUI\n  })\n\n  output$distribution <- renderPlotly({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    # hist(data_in()[[columns_reactive()]], col = \"salmon\", \n    #      probability = TRUE, breaks = as.numeric(input$n_breaks),\n    #      main = paste0(\"Histogram of \", columns_reactive()), \n    #      ylab = paste0(columns_reactive()), xlab = \"\")\n    # dens <- density(data_in()[[columns_reactive()]], adjust = input$bw_adjust)\n    # lines(dens, col = \"purple\", type=\"b\")\n    # \n    \n    plot_ly(x=data_in()[[columns_reactive()]], \n                 type=\"histogram\", opacity = 0.6, showlegend = FALSE)\n\n  })\n  \n  continuous_data <- reactive({\n    continuous_data = data_in()[, sapply(data_in(), is.numeric) | sapply(data_in(), is.integer)]\n    continuous_data = as.data.frame(continuous_data)\n    print(length(continuous_data))\n  })\n  \n  output$boxplot <- renderPlotly({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n\n   plot_ly(y = data_in()[[columns_reactive()]], type=\"box\")\n  })\n  \n  output$pairsmatrix <- renderPlot({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    \n    #ggpairs(continuous_data(), columns = 1:length(continuous_data()))\n    ggpairs(data_in())\n        \n  })\n  \n  mcor <- reactive({\n    mcor = cor(continuous_data(), use = \"complete.obs\")\n  })\n  \n  # output$correlogram <- renderPlot({\n  #   validate(\n  #     need(data_in(), \"Please select a dataset to upload.\")\n  #   )\n  #   corrplot(matrix(mcor()), type=\"upper\", order=\"hclust\", tl.col=\"black\", tl.srt=45)\n  # })\n\n  pivot_reactive <- reactive({\n    p = rpivotTable(data_in())\n    p\n  })\n  \n  output$pivot <- renderRpivotTable({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    pivot_reactive()\n  })\n  \n  \n  output$algosmodels <- renderText({\n    validate(\n      need(data_in(), \"Please select a dataset to upload.\")\n    )\n    if (length(continuous_data()) <= 2) {\n      t = paste0(\"Potential next steps include: Simple Linear Regression\")\n      print(t)\n    } else if (length(continuous_data()) < 14) {\n      t = paste0(\"Potential next steps include: Multiple Linear Regression\")\n      print(t)\n    } else if (length(continuous_data()) > 15) {\n      t = paste0(\"Potential next steps include: Variable Selection & Reduction\")\n      print(t)\n    } else {\n      print(\"This shoud not happen!\")\n    }\n    \n    \n  })\n})\n",
    "created" : 1464637496059.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2887568988",
    "id" : "1C6D9CB7",
    "lastKnownWriteTime" : 1464908066,
    "last_content_update" : 1464908066250,
    "path" : "~/Desktop/R-directory/data-exploreR/server.R",
    "project_path" : "server.R",
    "properties" : {
        "chunk_rendered_width" : "650"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}