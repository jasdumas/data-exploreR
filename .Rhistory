q()
data <- data.frame(x = rnorm(100), y= rnorm(100))
View(head(data))
write.csv(data, file="data.csv")
shiny::runApp()
runApp()
runApp()
runApp()
head(mtcars)
cor(mtcars, use = "complete.obs")
install.packages("corrplot")
runApp()
install.packages("Hmisc")
runApp()
runApp()
library(Hmisc)
res = rcorr(as.matrix(data))
res
flattenCorrMatrix(res$r, res$P)
runApp()
dim(data)
runApp()
r = c(1, 2, 3, NA)
r
length(is.na(r))
is.na(r)
library(dplyr)
count(iris, Species)
lapply(iris, count())
plot(iris$Species)
sum(is.na(r))
runApp()
runApp()
q()
0.000004 > 0.00000444444
0.000004 < 0.00000444444
shiny::runApp()
devtools::install_github(c("ramnathv/htmlwidgets", "smartinsightsfromdata/rpivotTable"))
library(rpivotTable)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?sidebarPanel
runApp()
runApp()
runApp()
library(ggplot2)
data(mtcars)
plotmatrix(mtcars[,1:3])
library(GGally)
ggpairs(data)
library(GGally)
runApp()
runApp()
library(plotly)
ggplotly()
runApp()
boxplot(data)
?qplot
qplot(data, geom="boxplot")
runApp()
runApp()
runApp()
ggplot(data) + geom_boxplot()
runApp()
runApp()
stem(data)
s = c(50, 100, 250, 500, 750, 1000, 1500, 10000, 20000, 50000)
s
t = c(2, 8, 51, 205, 456, 811, 1203, 8100, 16200, 40500)
plot(t, s)
library(plotly)
plot_ly(y = rnorm(50), type = "box") %>%
add_trace(y = rnorm(50, 1), type = "box")
plot_ly(data, type="box")
plot_ly(y=data, type="box")
plot_ly(x = rnorm(50), type = "histogram")
plot_ly(x=data)
data2 = data
plot_ly(x=data2$x, type="histogram")
runApp()
runApp()
runApp()
?plot_ly
plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
runApp()
runApp()
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
p2 <- layout(p, title = paste0("Histogram of "," columns_reactive()"),
xaxis = "")
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
p2 <- layout(p, title = paste0("Histogram of "," columns_reactive()"),
xaxis = list(title = ""))
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
p2 <- layout(p, title = paste0("Histogram of "," columns_reactive()"),
xaxis = list(title = "hi"))
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
p2 <- layout(p,
xaxis = list(title = "hi"))
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
x <- list(
title = "x Axis",
titlefont = f
)
p2 <- layout(p,  xaxis = x)
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
x <- list(title = "x Axis")
p2 <- layout(p,  xaxis = x)
f <- list(
family = "Courier New, monospace",
size = 18,
color = "#7f7f7f"
)
x <- list(
title = "x Axis",
titlefont = f
)
y <- list(
title = "y Axis",
titlefont = f
)
p <- plot_ly(x = rnorm(10), y = rnorm(10), mode = "markers") %>%
layout(xaxis = x, yaxis = y)
p
plot_ly(x = rnorm(50), type = "histogram", main = "hi")
plot_ly(y=data2$x, type="box")
plot_ly(x = rnorm(50), type = "histogram", title = "hi")
p <- plot_ly(x=data2$x, type="histogram",  opacity = 0.6, showlegend = FALSE)
x <- list(title = "x Axis")
p2 <- layout(p,  xaxis = x)
plot_ly(x = iris$Species, type = "histogram")
plot_ly(y=data2$x, type="box")
runApp()
runApp()
runApp()
plot_ly(y=data2, type="box")
plot_ly(ggplot2::diamonds, y = price, color = cut, type = "box")
plot_ly(data2, y = x, type = "box")
plot_ly(data2, y = y, type = "box")
plot_ly(data2, y = data2, type = "box")
ggplot(data2) + geom_boxplot()
ggplot(data2, aes(data2)) + geom_boxplot()
ggplot(data2, aes(x)) + geom_boxplot()
ggplot(data2, aes(x=x)) + geom_boxplot()
ggplot(data2, aes(x=x, y=y)) + geom_boxplot()
boxplot(data2)
ggplotly()
boxplot(data2)
?boxplot
runApp()
length(iris)
runApp()
5 >=3
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
if (length(iris) == 5) print("yay")
if (length(iris) == 4) print("yay")
if (length(iris) > 4) print("yay")
runApp()
runApp()
5 <= 2
runApp()
runApp()
runApp()
data <- read.csv("~/Desktop/R-directory/data-exploreR/data.csv", stringsAsFactors=FALSE)
View(data)
sum(is.na(data))
data <- read.csv("~/Desktop/R-directory/data-exploreR/data.csv", stringsAsFactors=FALSE)
View(data)
sum(is.na(data))
runApp()
runApp()
runApp()
corr(data)
cor(data)
c = data[, sapply(data, is.numeric)]
length(c)
cor(c)
ggpairs(c)
corplot(cor(c), type="upper", order="hclust")
library(shiny)
library(DT)
library(corrplot)
library(Hmisc)
library(rpivotTable)
library(ggplot2)
library(GGally)
library(plotly)
?corrplot
runApp()
runApp()
length(iris)
1:length(iris)
1:length(iris[, 1:4])
ggpairs(iris)
runApp()
n = sqrt(1000)
n
tsec = power(10, 6)
log(6)
3600 * log(6)
sqrt(3600 * log(6))
runApp()
mcor = cor(data2[, sapply(data2, is.numeric)], use="complete.obs")
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
mcor = cor(data[, sapply(data, is.numeric)], use="complete.obs")
corrplot(mcor, type="upper", order="hclust", tl.col="black", tl.srt=45)
write.csv(data2)
runApp()
write.csv(data2, file="data2.csv")
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("corrplot")
runApp()
install.packages("Hmisc")
runApp()
install.packages("rpivotTable")
runApp()
install.packages("GGally")
runApp()
runApp()
runApp()
runApp()
q()
